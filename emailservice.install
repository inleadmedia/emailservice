<?php

use Drupal\Core\Path\AliasStorage;
use Drupal\field\Entity\FieldStorageConfig as FieldStorageConfigAlias;
use Drupal\node\Entity\Node;

/**
 * @file
 */

function emailservice_schema() {
  $schema['emailservice_preferences_mapping'] = [
    'description' => 'Base table for storing client preferences.',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for a preference.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'preference_type' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'label' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'machine_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'cql_query' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ],
      'material_tid' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ],
      'status' => [
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
      ],
    ],
    'indexes' => [
      'id' => ['id'],
      'label' => ['label'],
      'machine_name' => ['machine_name'],
    ],
    'primary_key' => [
      'id',
    ],
  ];

  return $schema;
}

/**
 * Create path alias recursively for already existing nodes.
 */
function emailservice_update_8001() {
  $alias_storage = new AliasStorage(\Drupal::database(), \Drupal::moduleHandler());
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'subscription')
    ->execute();
  $nodes = Node::loadMultiple($nids);
  foreach ($nodes as $node) {
    $author_alias = $node->getOwner()->field_alias->value;
    try {
      $alias_storage->save('/sm/' . $author_alias, '/' . $author_alias);
    } catch (Exception $e) {
      echo $e;
    }
  }
}

/**
 * Add new column into database.
 *
 * @return \Drupal\Core\Database\Schema
 */
function emailservice_update_8002() {
  // Prepare field definition.
  $field = [
    'type' => 'int',
    'not null' => TRUE,
    'unsigned' => TRUE,
    'default' => 0,
  ];

  $schema = \Drupal::database()->schema();

  // Add field to custom table.
  $schema->addField('emailservice_preferences_mapping', 'material_tid', $field);

  // Prepare update of field table.
  $table = 'field_types_categories';
  $column = 'material_tid';

  // Update the field data table.
  $schema->addField('node__' . $table, $table . '_' . $column, $field);
  // The field revision table.
  $schema->addField('node_revision__' . $table, $table . '_' . $column, $field);
}

/**
 * Alter "Intro" field settings.
 */
function emailservice_update_8003() {
  // Add content format column into database.
  $column = [
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => 'full_html',
  ];

  $schema = \Drupal::database()->schema();
  $schema->addField('node__field_intro_text', 'field_intro_text_format', $column);
  $schema->addField('node_revision__field_intro_text', 'field_intro_text_format', $column);

  // Alter field storage settings.
  $config = \Drupal::configFactory()
    ->getEditable('field.storage.node.field_intro_text');
  $config->set('dependencies.module', ['node', 'text']);
  $config->set('type', 'text_long');
  $config->set('settings', []);
  $config->set('module', 'text');
  $config->save(TRUE);

  // Alter field settings.
  $config2 = \Drupal::configFactory()->getEditable('field.field.node.subscription.field_intro_text');
  $config2->set('field_type', 'text_long');
  $config2->save(TRUE);

  FieldStorageConfigAlias::loadByName('node', 'field_intro_text')->save();
}

/**
 * Change field type for "CQL query" field.
 */
function emailservice_update_8004() {
  $field_spec = [
    'type' => 'text',
    'size' => 'big',
    'not null' => TRUE,
  ];
  $schema = \Drupal::database()->schema();
  $schema->changeField('emailservice_preferences_mapping', 'cql_query', 'cql_query', $field_spec);

  $field_tables = ['node__field_types_categories', 'node_revision__field_types_categories'];

  foreach ($field_tables as $field_table) {
    $schema->changeField($field_table, 'field_types_categories_cql_query', 'field_types_categories_cql_query', $field_spec);
  }
}

/**
 * Manipulate Bog term.
 */
function emailservice_update_8005(&$sandbox) {
  // Update Boger (tid:58) to be Bog.
  $term = \Drupal\taxonomy\Entity\Term::load(58);
  $term->setName('Bog');
  $term->save();

  // Delete the old Bog (13) term.
  $term = \Drupal\taxonomy\Entity\Term::load(13);
  if ($term) {
    $term->delete();
  }

  // Re-save all nodes.
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'subscription']);
  foreach ($nodes as $node) {
    $typesCategories = $node->get('field_types_categories')->getValue();
    foreach ($typesCategories as $key => $typeCategory) {
      if ($typeCategory['material_tid'] == '13') {
        $typesCategories[$key]['material_tid'] = '58';
      }
    }
    $node->set('field_types_categories', $typesCategories);
    $node->save();
  }
}
